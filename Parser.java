/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
/** MA imports */

import parserElements.*;
import parserExceptions.*;
import compilerElements.*;
import java.util.Map;
import java.util.HashMap;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
/** ID lister. */
public class Parser implements ParserConstants {

  private static final String OUT_FILE = "-o";

  private static final String IN_FILE = "-i";

  /** Main entry point. */
  public static void main(String args[]) {
    boolean compile = false;
    String filename = null;
    String inputFile = null;
    for(int i=0; i<args.length; i++){
      switch(args[i]){
        case OUT_FILE:
          if(++i<args.length){
            filename = args[i];
            if(!filename.endsWith("\u005c\u005c.j"))
              filename = String.format("%s.j", filename);
            compile = true;
          }else{
            System.out.println(String.format("Flag %s need at least 1 argument!", args[i-1]));
            System.exit(1);
          }
          break;
        case IN_FILE:
          if(++i<args.length){
            inputFile = args[i];
          }else{
            System.out.println(String.format("Flag %s need at least 1 argument!", args[i-1]));
            System.exit(1);
          }
          break;
        default:
          System.out.println(String.format("Flag %s not recognized!", args[i]));
          System.exit(1);
      }
    }
    Parser parser;
    if(inputFile==null)
      parser = new Parser(System.in);
    else
      try{
        parser = new Parser(new FileInputStream(inputFile));
      }catch(FileNotFoundException e){
        System.out.println(e.getMessage());
        System.exit(1);
        return;
      }
    if(compile)
      compiler(parser, filename);
    else
      interpreter(parser);
  }

  private static final void interpreter(Parser parser){
      ASTNode exp;
      Env env = new Env<IValue>();
      while (true) {
        try {
          System.out.print("> ");
          exp = parser.Start();
          exp.eval(env).show();
          System.out.println();
        } catch (Exception e) {
          System.out.println (String.format("Syntax Error: %s",e.getMessage()));
          parser.ReInit(System.in);
        }
      }
    }

    private static final void compiler(Parser parser, String filename){
      ASTNode exp;
      Env env = new Env<FrameComp>();
      CodeBlock comp = CodeBlock.getInstance();
      try {
        System.out.print("> ");
        exp = parser.Start();
        exp.compile(env, comp);
        comp.dump(filename);
      } catch (Exception e) {
        System.out.println(String.format("Syntax Error: %s",e.getMessage()));
      }
    }

  static final public ASTNode Start() throws ParseException {ASTNode t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:
    case LET:
    case Bool:
    case Id:
    case Num:
    case PLUS:
    case MINUS:
    case LPAR:{
      t = Won();
      jj_consume_token(EL);
      break;
      }
    case QUIT:{
      jj_consume_token(QUIT);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
      jj_consume_token(EL);
t=null;System.exit(0);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Won() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = Lon();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        op = jj_consume_token(AND);
        break;
        }
      case OR:{
        op = jj_consume_token(OR);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Lon();
if (op.kind == AND)
                        t1 = new ASTAnd(t1,t2);
                   else
                        t1 = new ASTOr(t1,t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Lon() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = Exp();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MATCH:
      case LESS_EQUAL:
      case LESS:
      case GREATER_EQUAL:
      case GREATER:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MATCH:{
        op = jj_consume_token(MATCH);
        break;
        }
      case GREATER:{
        op = jj_consume_token(GREATER);
        break;
        }
      case GREATER_EQUAL:{
        op = jj_consume_token(GREATER_EQUAL);
        break;
        }
      case LESS:{
        op = jj_consume_token(LESS);
        break;
        }
      case LESS_EQUAL:{
        op = jj_consume_token(LESS_EQUAL);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Exp();
if (op.kind == MATCH)
                        t1 = new ASTEq(t1,t2);
                   else if(op.kind == GREATER)
                        t1 = new ASTGreater(t1,t2);
                   else if(op.kind == GREATER_EQUAL)
                        t1 = new ASTGreaterEq(t1,t2);
                   else if(op.kind == LESS)
                        t1 = new ASTLess(t1,t2);
                   else
                        t1 = new ASTLessEq(t1,t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Exp() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        op = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
if (op.kind == PLUS)
                        t1 = new ASTPlus(t1,t2);
                   else
                        t1 = new ASTSub(t1,t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Term() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = Fact();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:{
        op = jj_consume_token(TIMES);
        break;
        }
      case DIV:{
        op = jj_consume_token(DIV);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Fact();
if(op.kind == TIMES)
                        t1 = new ASTTimes(t1,t2);
                    else
                        t1 = new ASTDiv(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fact() throws ParseException {Token n;
  ASTNode t1, t2;
  Map<String, ASTNode> map = new HashMap();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Num:{
      n = jj_consume_token(Num);
t1 = new ASTNum(Integer.parseInt(n.image));
      break;
      }
    case Bool:{
      n = jj_consume_token(Bool);
t1 = new ASTBool(Boolean.parseBoolean(n.image));
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      t1 = Exp();
      jj_consume_token(RPAR);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      t1 = Fact();
t1=new ASTInvertInt(t1);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      t1 = Fact();
t1=new ASTInvertBool(t1);
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      t1 = Fact();
      break;
      }
    case Id:{
      n = jj_consume_token(Id);
t1 = new ASTId(n.image);
      break;
      }
    case LET:{
      jj_consume_token(LET);
      label_5:
      while (true) {
        n = jj_consume_token(Id);
        jj_consume_token(EQUAL);
        t1 = Exp();
t2=map.put(n.image, t1);
          if(t2!=null)
            {if (true) throw new TypeError(String.format("Id (%s) assigned twice at same level!", n.image));}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Id:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(IN);
      t2 = Exp();
      jj_consume_token(END);
t1 = new ASTLet(
          map,
          t2);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x82800010,0x600000,0x600000,0x1e8000,0x1e8000,0x0,0x0,0x0,0x0,0x0,0x82800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4f,0x0,0x0,0x0,0x0,0xc,0xc,0x30,0x30,0x1,0x4f,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

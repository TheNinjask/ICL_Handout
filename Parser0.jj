PARSER_BEGIN(Parser)

/** MA imports */

import parserElements.*;
import parserExceptions.*;
import compilerElements.*;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
/** ID lister. */
public class Parser {

  private static final String OUT_FILE = "-o";

  private static final String IN_FILE = "-i";

  private static final String JAR_JASMINE = "-j";
  /** Main entry point. */
  public static void main(String args[]) {
    boolean compile = false;
    String filename = null;
    String inputFile = null;
    String jasminJar = null;
    for(int i=0; i<args.length; i++){
      switch(args[i]){
        case OUT_FILE:
          if(++i<args.length){
            filename = args[i];
            if(!filename.endsWith(".j"))
              filename = String.format("%s.j", filename);
            compile = true;
          }else{
            System.out.println(String.format("Flag %s need at least 1 argument!", args[i-1]));
            System.exit(1);  
          }
          break;
        case IN_FILE:
          if(++i<args.length){
            inputFile = args[i];
          }else{
            System.out.println(String.format("Flag %s need at least 1 argument!", args[i-1]));
            System.exit(1);  
          }
          break;
        case JAR_JASMINE:
          if(++i<args.length){
            jasminJar = args[i];
          }else{
            System.out.println(String.format("Flag %s need at least 1 argument!", args[i-1]));
            System.exit(1);  
          }
          break;
        default:
          System.out.println(String.format("Flag %s not recognized!", args[i]));
          System.exit(1);
      }
    }
    Parser parser;
    if(inputFile==null)
      parser = new Parser(System.in);
    else
      try{
        parser = new Parser(new FileInputStream(inputFile));
      }catch(FileNotFoundException e){
        System.out.println(e.getMessage());
        System.exit(1);
        return;
      }
    if(compile)
      compiler(parser, filename, jasminJar);
    else
      interpreter(parser);
  }

  private static final void interpreter(Parser parser){
      ASTNode exp;
      Env env = new Env<IValue>();
      while (true) {
        try {
          System.out.print("> ");
          exp = parser.Start();
          exp.eval(env);//.show();
          System.out.println();
        } catch (Exception e) {
          System.out.println (String.format("Syntax Error: %s",e.getMessage()));
          parser.ReInit(System.in);
        }
      }
    }

    private static final void compiler(Parser parser, String filename, String jasminJar){
      ASTNode exp;
      Env env = new Env<FrameComp>();
      Env envType = new Env<IType>();
      CodeBlock comp = CodeBlock.getInstance();
      try {
        System.out.print("> ");
        exp = parser.Start();
        //exp.typecheker(envType);
        exp.compile(env, envType, comp);
        comp.dump(filename);
        if(jasminJar!=null)
          comp.compJasminWin(filename, jasminJar);
      } catch (Exception e) {
        System.out.println(String.format("Syntax Error: %s",e.getMessage()));
      }
    }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
  < PRINTLN: ("println")|("PRINTLN")|("Println")|("PrintLn")>
  |
  < QUIT: ("quit")|("QUIT")|("Quit")>
  |
  < CLEAR: ("cls")|("CLS")|("Cls")|("clear")|("CLEAR")|("Clear")>
  |
  < FINAL: ";;">
  |
  < STRUCT: ("STRUCT")|("struct")|("Struct")>
  |
  < STRING: ("STRING")|("string")|("String")>
  |
  < INT: ("INT")|("int")|("Int")>
  |
  < BOOL: ("BOOL")|("bool")|("Bool")>
  |
  < REF: ("REF")|("ref")|("Ref")>
  |
  < FUN: ("fun")|("FUN")|("Fun")>
  |
  < NEW: ("new")|("NEW")|("New")>
  |
  < IF: ("if")|("IF")|("If")>
  |
  < THEN: ("then")|("THEN")|("Then")>
  |
  < ELSE: ("else")|("ELSE")|("Else")>
  |
  < WHILE: ("while")|("WHILE")|("While")>
  |
  < DO: ("do")|("DO")|("Do")>
  |
  < APPLY: "->">
  |
  < ASSIGN: ":=">
  |
  < MATCH: "==">
  |
  < NOT_MATCH: ("~=")|("!=")> 
  |
  < LESS_EQUAL: "<=">
  |
  < LESS: "<" >
  |
  < GREATER_EQUAL: ">=">
  |
  < GREATER: ">">
  |
  < AND: "&&">
  |
  < OR: "||">
  |
  < NOT: ("~")>
  |
  < LCBRACKET: "{">
  |
  < RCBRACKET: "}">
  |
  < DOT: ".">
  |
  < QUOTE: "\"">
  |
  < DEASSIGN: "!">
  |
  < LET: ("let")|("LET")|("Let") >
  | 
  < EQUAL: "=" >
  |
  < COMMA: "," >
  |
  < COLON: ":">
  |
  < SEMICOLON: ";">
  |
  < IN: ("in")|("IN")|("In")>
  |
  < END: ("end")|("END")|("End")>
  |
  < Bool: ("true")|("TRUE")|("True")|("false")|("FALSE")|("False")>
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  //|
  //< EL: "\n" >
}

JAVACODE
ASTNode cls(){ //TODO rework
  for(int i = 0; i<50; i++){
    System.out.println();
  }
  return new ASTBool(true);
}

ASTNode Start():
{ ASTNode t; }
{
   (
   t = EM() <FINAL>
   | <QUIT><LPAR><RPAR><FINAL> {t=null;System.exit(0);} //this solution seems dorty :s
   | <CLEAR><FINAL> {t=cls();}
   )
   { return t; }
}

ASTNode EM():
{ ASTNode t,t2; }
{
   (
   t = E() (LOOKAHEAD(2) <SEMICOLON> t2 = EM(){t=new ASTSeq(t,t2);})* (LOOKAHEAD(2) <SEMICOLON>)?
   )
   { return t; }
}

ASTNode E() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=EA() ( LOOKAHEAD(2)
       ( op=<GREATER_EQUAL>| op=<GREATER> | op=<LESS_EQUAL> | op=<LESS> | op=<MATCH> |op=<AND> | op=<OR>
     ) t2=EA() 
                 { if (op.kind == MATCH) 
                        t1 = new ASTEq(t1,t2);
                   else if(op.kind == GREATER)
                        t1 = new ASTGreater(t1,t2);
                   else if(op.kind == GREATER_EQUAL)
                        t1 = new ASTGreaterEq(t1,t2);
                   else if(op.kind == LESS)
                        t1 = new ASTLess(t1,t2);
                   else if(op.kind == LESS_EQUAL)
                        t1 = new ASTLessEq(t1,t2);
                   else if (op.kind == AND) 
                        t1 = new ASTAnd(t1,t2);
                   else 
                        t1 = new ASTOr(t1,t2); 
                 } 
               ) ?
     { return t1; } 
}

ASTNode EA() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=T() ( LOOKAHEAD(2) ( op=<PLUS> | op=<MINUS>) t2=EA() 
                 { if (op.kind == PLUS) 
                        t1 = new ASTPlus(t1,t2);
                   else
                        t1 = new ASTSub(t1,t2);
                 } 
               ) *
               
     { return t1; } 
}

ASTNode T():
{
  Token op;
  ASTNode t1, t2;
  List<ASTNode> pseudoT;
}
{
  t1=F() ( 
                ( op=<ASSIGN>) t2=E() 
                  {
                    t1 = new ASTAssign(t1,t2);
                  }
                
                |
                (
                  <LPAR> pseudoT=AL() <RPAR>
                  {
                    t1 = new ASTApply(pseudoT, t1);
                  }
                )
                |
                  <DOT> op=<Id>
                  {t1 = new ASTGetField(t1, op.image);}
                |
                ( LOOKAHEAD(2) ( op=<TIMES> | op=<DIV>) t2=T() 
                  {
                    if(op.kind == TIMES)
                        t1 = new ASTTimes(t1,t2);
                    else
                        t1 = new ASTDiv(t1, t2);
                  }
                )*
          )
    {return t1;}
}

List<ASTNode> AL():
{
  Token op;
  ASTNode t1, t2;
  List<ASTNode> params = new ArrayList();
}
{
  (t1 = EM() (
              (op=<COMMA>) t2=EM()
              {params.add(t2);}
            )*  
    {params.add(t1);}
  )?
  {return params;}
}

Map<String, ASTNode> PL():
{
  Token out, in;
  ASTNode t, t2;
  Map<String, ASTNode> type = new HashMap();
}
{ 
  (
    out=<Id> <COLON> t=TY()
    (
      <COMMA> in=<Id> <COLON> t2=TY()
      {
    if(type.put(in.image, t2)!=null)
      throw new TypeError(String.format("Id (%s) assigned twice at same level!", in.image));
  } 
    )*
  {
    if(type.put(out.image, t)!=null)
      throw new TypeError(String.format("Id (%s) assigned twice at same level!", out.image));
  }        
  )?
  {return type;}
}

ASTNode TY():
{
  Token n;
  ASTNode t, t2;
  List<ASTNode> types = new ArrayList();
}
{
  (
    n=<INT> {t = new ASTIntType();}
    | n=<BOOL> {t = new ASTBoolType();}
    | n=<STRING> {t = new ASTStringType();}
    | n=<STRUCT> {t = new ASTStructType();}
    | n=<REF> t=TY() {t = new ASTRefType(t);}
    | <LPAR>
      (
        t = TY()
        (
          <COMMA>
          t2 = TY()
          {types.add(t2);}
        )*
        {types.add(t);}
      )?
      <RPAR> t=TY() {t = new ASTFunType(types, t);}
  )
  {return t;}
}

ASTNode F() :
{ 
  Token n, a;
  ASTNode t1, t2, t3;
  Map<String, ASTNode> map = new HashMap();
  Map<String, ASTNode> mapType = new HashMap();
  Set<String> params = new HashSet();
}
{
   (
      n=<Num> { t1 = new ASTNum(Integer.parseInt(n.image)); }
      | n=<Bool> {t1 = new ASTBool(Boolean.parseBoolean(n.image));}
      | <QUOTE>n=<Id><QUOTE> {t1 = new ASTString(n.image);} 
      | <LPAR> t1=EM() <RPAR> 
      | <MINUS> t1=F() { t1=new ASTInvertInt(t1);} 
      | <NOT> t1=F() { t1=new ASTInvertBool(t1);}
      | <PLUS> t1=F()
      | n=<Id> {t1 = new ASTId(n.image);}
      | <LET> 
        (n=<Id> <COLON> t3 = TY() <EQUAL> t1=EM() {
          t2=map.put(n.image, t1);
          mapType.put(n.image, t3);
          if(t2!=null)
            throw new TypeError(String.format("Id (%s) assigned twice at same level!", n.image));
          }
          )+   
        <IN> t2=EM() <END> 
      {
        t1 = new ASTLet(
          map,
          mapType, 
          t2);
      }
      | <NEW> t1=F() { t1=new ASTRef(t1);}
      | <DEASSIGN> t1=F() {t1=new ASTDeRef(t1);}
      | <IF> t1=EM() <THEN> t2=EM() <ELSE> t3=EM() <END>
      {
        t1 = new ASTIf(t1, t2, t3);
      }
      | <WHILE> t1=EM() <DO> t2=EM() <END>
      {
        t1 = new ASTWhile(t1, t2);
      }
      | <PRINTLN> t1=E() {t1 = new ASTPrintln(t1);}
      | <FUN> 
          mapType = PL()
        <APPLY> t1=EM() <END>{t1 = new ASTFunc(t1, mapType);}
      |
       <LCBRACKET>
       (
        n=<Id> <EQUAL> t1 = E()
        (
          <SEMICOLON>
          a=<Id> <EQUAL> t2 = E()
          {
          if(map.put(a.image, t2)!=null)
            throw new TypeError(String.format("Id (%s) assigned twice at same level!", n.image));
          }
        )*
        {
        if(map.put(n.image, t1)!=null)
            throw new TypeError(String.format("Id (%s) assigned twice at same level!", n.image));
        }
       )?{t1 = new ASTStruct(map);}
       <RCBRACKET>
    )
   { return t1; }
}
